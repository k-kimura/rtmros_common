(load "package://hrpsys_ros_bridge_tutorials/euslisp/hrp2jsk-interface.l")
(hrp2jsk-init)

(defun main (&key (data-num 10000))
  (let* (l (sum-time 0.0) (sum-variance 0.0) ave-time sigma2 sigma (worst-time 0.0))
    (dotimes (i data-num)
     (let* ((sgp (* 10.0 (- (random 2.0) 1.0))) ;; random value from -10.0 to 10.0
            (this-time (bench2 (send *ri* :stabilizerservice_setsegwayparameter :i_param (instance hrpsys_ros_bridge::Openhrp_StabilizerService_sgParam :init :segway_param sgp))))
            ;;(this-time (bench2 (send (send *ri* :get-st-param) :segway_param)))
            ;;(this-time (bench2 (send *ri* :set-st-param :segway-param sgp)))
            )
       (warn ";; [segway_param = ~a]  Time = ~a [s]~%" sgp this-time)
       (push this-time l)
       ))
    (warn ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;~%~%")
    (setq l (reverse l))
    (dolist (tm l) (setq sum-time (+ sum-time tm)))
    (setq ave-time (/ sum-time data-num))
    (warn ";; Average time for set segway parameter: ~a [s]~%" ave-time)
    (dolist (tm l) (setq sum-variance (+ sum-variance (expt (- tm ave-time) 2))))
    (setq sigma2 (/ sum-variance data-num))
    (setq sigma (sqrt sigma2))
    (warn ";; Variance time for set segway parameter: ~a [s]~%" sigma)
    (dolist (tm l) (if (> tm worst-time) (setq worst-time tm)))
    (warn ";; Worst time for set segway parameter: ~a [s]~%" worst-time)
    ))

(warn ";; (main :data-num 10000)~%")
